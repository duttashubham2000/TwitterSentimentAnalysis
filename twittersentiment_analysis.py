# -*- coding: utf-8 -*-
"""TwitterSentiment Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JtOqf6TU8IZo16HKKKo6tWmlJqUOTOHW

loading the libraries to be used
"""

# Commented out IPython magic to ensure Python compatibility.
import re    # for regular expressions
import nltk  # for text manipulation
import string
import warnings
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option("display.max_colwidth", 200)
warnings.filterwarnings("ignore", category=DeprecationWarning)
# %matplotlib inline

import pandas as pd

train  = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/train_E6oV3lV.csv')
test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/test_tweets_anuFYb8.csv')

print(train[train['label'] == 0].head())
print('--------------------------------------')
print(train[train['label'] == 1].head())

"""**Data Inspection**

1----> hate speech
0---->normal speech
"""

train[train['label'] == 0].head(10)

train[train['label'] == 1].head(10)

"""dimensions of the train and test dataset."""

train.shape, test.shape

"""distribution of length of the tweets, in terms of words, in both train and test data."""

length_train = train['tweet'].str.len()
length_test = test['tweet'].str.len()
plt.hist(length_train, bins=20, label="train_tweets")
plt.hist(length_test, bins=20, label="test_tweets")
plt.legend()
plt.show()

combine = train.append(test, ignore_index=True)
combine.shape

"""removing unwanted text patterns from the tweets."""

def remove_pattern(input_txt, pattern):
    r = re.findall(pattern, input_txt)
    for i in r:
        input_txt = re.sub(i, '', input_txt)
    return input_txt

"""# Removing Twitter **Handles**"""

combine['clean_tweet'] = np.vectorize(remove_pattern)(combine['tweet'], "@[w]*")
combine.head()

"""# Removing Punctuations, Numbers, and Special **Characters**"""

combine['clean_tweet'] = combine['clean_tweet'].str.replace("[^a-zA-Z#]", " ")
combine.head(10)

"""# Removing Short **Words**"""

combine['clean_tweet'] = combine['clean_tweet'].apply(lambda x: ' '.join([w  for w in x.split() if len(w)>3]))

combine.head()

"""# **Text Normalization**"""

token_tweet = combine['clean_tweet'].apply(lambda x: x.split()) # tokenizing
token_tweet.head()

from nltk.stem.porter import *
stemmer = PorterStemmer()
token_tweet = token_tweet.apply(lambda x: [stemmer.stem(i) for i in x])

for i in range(len(token_tweet)):
    token_tweet[i] = ' '.join(token_tweet[i])
combine['clean_tweet'] = token_tweet

"""# **Extracting Features from Cleaned Tweets**

Bag-of-words Features
"""

from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
import gensim

bow_vectorizer = CountVectorizer(max_df=0.90, min_df=2, max_features=1000,stop_words='english')
bow = bow_vectorizer.fit_transform(combine['clean_tweet'])
bow.shape

"""# Model Building

Logistic Regression(sklearn)
"""

from sklearn.linear_model import LogisticRegression
 from sklearn.model_selection import train_test_split
 from sklearn.metrics import f1_score
 from sklearn.metrics import accuracy_score

# Extracting train and test BoW features
train_bow = bow[:31962,:]; test_bow = bow[31962:,:]
# splitting data into training and validation set
xtrain_bow, xvalid_bow, ytrain, yvalid = train_test_split(train_bow, train['label'],
                                            random_state=42,test_size=0.3)

lreg = LogisticRegression()
# training the model
lreg.fit(xtrain_bow, ytrain)
prediction = lreg.predict_proba(xvalid_bow) # predicting on the validation set
prediction_int = prediction[:,1] >= 0.3 # if prediction is greater than or equal to 0.3 than 1 else 0
prediction_int = prediction_int.astype(np.int)
accuracy=accuracy_score(yvalid, prediction_int)
f1_score(yvalid, prediction_int) # calculating f1 score for the validation set

print("Accuracy:", accuracy)

test_pred = lreg.predict_proba(test_bow)
test_pred_int = test_pred[:,1] >= 0.3
test_pred_int = test_pred_int.astype(np.int)
test['label'] = test_pred_int
submission = test[['id','label']]
submission.to_csv('sub_lreg_bow.csv', index=False)

